type: edu
custom_name: "Welcome, customer!"
files:
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;


    import java.util.List;
    import java.util.Scanner;


    public class Main {
        static Scanner scanner = new Scanner(System.in);

        public static void main(String[] args) {
            mainChoice();
        }

        public static void mainChoice() {
            CompanyDao companyDao = new CompanyDaoImpl();
            boolean flag = true;
            while (flag) {
                System.out.println("1. Log in as a manager\n" +
                        "0. Exit");
                int decision = scanner.nextInt();
                scanner.nextLine();
                switch (decision) {
                    case 1:
                        managerLogIn(companyDao);
                        break;
                    case 0:
                        flag = false;
                        break;
                }
            }
        }

        public static void managerLogIn(CompanyDao companyDao) {
            boolean flag = true;
            while (flag) {
                System.out.println("\n1. Company list\n" +
                        "2. Create a company\n" +
                        "0. Back");
                int decision = scanner.nextInt();
                scanner.nextLine();
                switch (decision) {
                    case 1:
                        List<Company> companies = companyDao.getAllCompanies();
                        if (companies.isEmpty()) {
                            System.out.println("The company list is empty!");
                        } else {
                            System.out.println("\nThe company list:\n");
                            for (Company company : companies) {
                                System.out.println(company.getId() + ". " + company.getName());
                            }
                        }
                        break;
                    case 2:
                        System.out.println("\nEnter the company name:");
                        String newCompany = scanner.nextLine();
                        companyDao.createCompany(newCompany);
                        System.out.println("The company was created!\n");
                        break;
                    case 0:
                        flag = false;
                        System.out.println();
                        break;
                }
            }
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = 1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest(order = 2)
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest(order = 4)
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTest(order = 5)
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();

            String[][] customerColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"RENTED_CAR_ID", "INT"}};
            db.ifColumnsExist("customer", customerColumns);
            db.checkCustomerColumnProperties();
            return correct();
        }

        @DynamicTest(order = 6)
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();
            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected 'Super company' company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected 'Another company' company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected 'One more company' company.\n" +
                    "Your output should contain '2. One more company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTest(order = 7)
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();
            db.clearCustomerTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 8)
        public CheckResult test8_testAddCustomer() {

            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();

            if (!output.contains("2. Log in as a customer")) {
                return wrong("Start menu should contain \"2. Log in as a customer\"");
            }

            if (!output.contains("3. Create a customer")) {
                return wrong("Start menu should contain \"3. Create a customer\"");
            }

            output = program.execute("2");

            if (!output.contains("The customer list is empty!")) {
                return wrong("If no customers were created you should print 'The customer list is empty!'");
            }

            output = program.execute("3");

            if (!output.contains("Enter the customer name:")) {
                return wrong("After choosing '3. Create a customer' option you should ask to enter a customer name.\n" +
                    "Your output should contain 'Enter the customer name:'");
            }

            program.execute("First customer");
            db.checkCustomer("First customer", null);

            program.execute("3");
            output = program.execute("Second customer");
            db.checkCustomer("Second customer", null);

            if (!output.contains("2. Log in as a customer")) {
                return wrong("After creating a customer you should print main menu again.\n" +
                    "Your output should contain '2. Log in as a customer'");
            }

            output = program.execute("2");


            if (!output.contains("1. First customer")) {
                return wrong("In the customer list expected 'First customer' customer.\n" +
                    "Your output should contain '1. First customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            if (!output.contains("2. Second customer")) {
                return wrong("In the customer list expected 'Second customer' customer.\n" +
                    "Your output should contain '2. Second customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("1. Rent a car")) {
                return wrong("After choosing customer you should print menu that contains '1. Rent a car' item");
            }

            if (!output.contains("2. Return a rented car")) {
                return wrong("After choosing customer you should print menu that contains '2. Return a rented car' item");
            }

            if (!output.contains("3. My rented car")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            output = program.execute("3");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '3. My rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            output = program.execute("2");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '2. Return a rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            return correct();
        }

        @DynamicTest(order = 9)
        public CheckResult test9_testRentCar() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            db.checkCustomer("First customer", null);
            db.checkCustomer("Second customer", null);

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            db.checkCar("Drive Now", "Lamborghini Urraco");
            db.checkCar("Car To Go", "Hyundai Venue");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            program.execute("2");
            program.execute("1");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("You rented 'Hyundai Venue'")) {
                return wrong("After renting 'Hyundai Venue' you shoul print 'You rented 'Hyundai Venue'");
            }

            db.checkCustomer("First customer", "Hyundai Venue");

            if (!output.contains("3. My rented car")) {
                return wrong("After renting a car you should print menu that contains '3. My rented car' option.");
            }

            output = program.execute("3");

            if (!output.contains("Hyundai Venue")) {
                return wrong("After choosing '3. My rented car' option expected car name is 'Hyundai Venue'");
            }

            if (!output.contains("Car To Go")) {
                return wrong("After choosing '3. My rented car' option expected company name is 'Car To Go'");
            }

            output = program.execute("1");

            if (!output.contains("You've already rented a car!")) {
                return wrong("If a customer has already rented a car and is trying to rent another one you should print 'You've already rented a car!'");
            }

            output = program.execute("2");

            if (!output.contains("You've returned a rented car!")) {
                return wrong("If a customer has already returned a rented car and is trying to return another one you should print 'You've returned a rented car!'");
            }

            db.checkCustomer("First customer", null);

            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 10)
        public CheckResult test10_testRentedCarInList() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            program.execute("2");
            program.execute("2");
            program.execute("1");
            program.execute("1");
            program.execute("1");
            program.execute("0");

            program.execute("2");
            program.execute("1");
            program.execute("1");

            output = program.execute("1");
            if (output.contains("Hyundai Venue")) {
                return wrong("You shouldn't print out a car if it is already rented!");
            }

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
                getConnection().createStatement().execute("ALTER TABLE COMPANY ALTER COLUMN id RESTART WITH 1");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
                getConnection().createStatement().execute("ALTER TABLE CAR ALTER COLUMN id RESTART WITH 1");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCustomerTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CUSTOMER");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CUSTOMER table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table\n" +
                            "Make sure you don't clear the database after starting the program");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' company ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomer(String name, String carName) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM CUSTOMER WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' customer in the 'CUSTOMER' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                if (carName == null) {
                    if (resultSet.getString("RENTED_CAR_ID") != null) {
                        throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should be NULL");
                    }
                    return;
                }

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);
                ResultSet carResultSet = carStatement.executeQuery();

                if (!carResultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                int carId = carResultSet.getInt("ID");

                if (resultSet.getInt("RENTED_CAR_ID") != carId) {
                    throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should reference to the '" + carName + "' car ID.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }


        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomerColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CUSTOMER' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CUSTOMER' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'YES'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table has NOT NULL constraint, but it shouldn't");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table is not FOREIGN KEY. It should refer to 'ID' column of the 'CAR' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("CAR(ID)")) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table doesn't refer to 'ID' column of the 'CAR' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: src/carsharing/DAO/CompanyImpl.java
  visible: true
  text: "package carsharing.DAO;\n\nimport carsharing.Database;\nimport carsharing.Entities.Company;\n\
    \nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\
    import java.util.ArrayList;\nimport java.util.List;\n\npublic class CompanyImpl\
    \ implements AbstractDao<Company> {\n\n    private List<Company> companies;\n\n\
    \    public CompanyImpl() {\n        this.companies = new ArrayList<>();\n   \
    \ }\n\n    @Override\n    public List<Company> getAll() {\n        try {\n   \
    \         String printCompaniesQuery = \"\"\"\n                              \
    \           SELECT *\n                                         FROM COMPANY\n\
    \                                         ORDER BY ID;\n                     \
    \                    \"\"\";\n            ResultSet rs = Database.stmt.executeQuery(printCompaniesQuery);\n\
    \            companies.clear();\n            while (rs.next())\n             \
    \   companies.add(new Company(rs.getInt(\"ID\"), rs.getString(\"NAME\")));\n \
    \       }\n        catch (SQLException e) {\n            e.printStackTrace();\n\
    \        }\n        return companies;\n    }\n\n    @Override\n    public void\
    \ create(Company company) {\n        try {\n            String query = \"\"\"\n\
    \                           INSERT INTO COMPANY (NAME)\n                     \
    \      VALUES (?);\n                           \"\"\";\n            PreparedStatement\
    \ prepdStmt = Database.connection.prepareStatement(query);\n            prepdStmt.setString(1,\
    \ company.getName());\n            prepdStmt.executeUpdate();\n            prepdStmt.close();\n\
    \        } catch (SQLException e) {\n            e.printStackTrace();\n      \
    \  }\n    }\n\n    @Override\n    public void update(Company entity) {\n    }\n\
    \n    @Override\n    public void delete(int id) {\n    }\n\n    public void printCompanies()\
    \ {\n        for (Company company : companies)\n            System.out.println(company.toString());\n\
    \    }\n\n    public int count () {\n        companies = getAll();\n        return\
    \ companies.size();\n    }\n\n    public String getCompanyName(int companyID)\
    \ {\n        try {\n            String query = \"\"\"\n                      \
    \     SELECT *\n                           FROM COMPANY \n                   \
    \        WHERE ID = (?);\n                           \"\"\";\n            PreparedStatement\
    \ prepdStmt = Database.connection.prepareStatement(query);\n            prepdStmt.setInt(1,\
    \ companyID);\n            ResultSet rs = prepdStmt.executeQuery();\n        \
    \    rs.next();\n            return rs.getString(\"NAME\");\n        }\n     \
    \   catch (SQLException e) {\n            e.printStackTrace();\n        }\n  \
    \      return null;\n    }\n}"
  learner_created: true
- name: src/carsharing/db/carsharing.mv.db
  visible: true
  text: SDoyLGJsb2NrOjUsYmxvY2tTaXplOjEwMDAsY2h1bms6MyxjbGVhbjoxLGNyZWF0ZWQ6MTg3MzIxY2ZiYzcsZm9ybWF0OjEsdmVyc2lvbjozLGZsZXRjaGVyOjFlZjY3NDExCgg6MixibG9jazo1LGJsb2NrU2l6ZToxMDAwLGNodW5rOjMsY2xlYW46MSxjcmVhdGVkOjE4NzMyMWNmYmM3LGZvcm1hdDoxLHZlcnNpb246MyxmbGV0Y2hlcjoxZWY2NzQxMQojaHVuazoxLGJsb2NrOjIsbGVuOjEsbWFwOjYsbWF4OjEzMCxuZXh0OjMscGFnZXM6Mixyb290OjQwMDAwMDM2OGMsdGltZToxYSx2ZXJzaW9uOjEscGluQ291bnQ6MCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKAAAAJQCRAwEAMQARBCEgJlhTRVQgQ1JFQVRFX0JVSUxEIDIwMAAAAPkAIgANAAVtYXAuMQVtYXAuMgVtYXAuMwVtYXAuNAVtYXAuNQVtYXAuNgxuYW1lLmxvYkRhdGELbmFtZS5sb2JNYXALbmFtZS5sb2JSZWYVbmFtZS5vcGVuVHJhbnNhY3Rpb25zDG5hbWUudGFibGUuMA5uYW1lLnVuZG9Mb2cuMQZyb290LjMVbmFtZTpvcGVuVHJhbnNhY3Rpb25zDm5hbWU6dW5kb0xvZy4xDG5hbWU6dGFibGUuMAtuYW1lOmxvYk1hcAtuYW1lOmxvYlJlZgxuYW1lOmxvYkRhdGEBNgE0ATUBMQEzATIKNDAwMDAwMmQ0MgodW5rOjEsYmxvY2s6Mix2ZXJzaW9uOjEsZmxldGNoZXI6ODRkMGQ1ZjYgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKY2h1bms6MixibG9jazozLGxlbjoyLG1hcDplLG1heDoxNDAwLG5leHQ6NSxwYWdlczoyLHJvb3Q6ODAwMDAzNDY1NCx0aW1lOjM4LHZlcnNpb246MixwaW5Db3VudDowICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgAADGQM0wMYADEyMzQ1NjcFCAUJBQoFCwUMBQ0FDgUPBRAFEQUSBRMFFAUVBRYFFwUYABEEISAmWFNFVCBDUkVBVEVfQlVJTEQgMjAwEQQiICINMkNSRUFURSBVU0VSIElGIE5PVCBFWElTVFMgIiIgU0FMVCAnJyBIQVNIICcnIEFETUlOEQQjICANkQJDUkVBVEUgQ0FDSEVEIFRBQkxFICJQVUJMSUMiLiJDT01QQU5ZIigKICAgICJJRCIgSU5UIERFRkFVTFQgTkVYVCBWQUxVRSBGT1IgIlBVQkxJQyIuIlNZU1RFTV9TRVFVRU5DRV8zQjZEOTE1QV84MkVCXzREMkFfODUyNF85QTdDMzlGNDIxRUUiIE5PVCBOVUxMIE5VTExfVE9fREVGQVVMVCBTRVFVRU5DRSAiUFVCTElDIi4iU1lTVEVNX1NFUVVFTkNFXzNCNkQ5MTVBXzgyRUJfNEQyQV84NTI0XzlBN0MzOUY0MjFFRSIsCiAgICAiTkFNRSIgVkFSQ0hBUigyNTUpIE5PVCBOVUxMCikRBCQgIw1tQ1JFQVRFIFNFUVVFTkNFICJQVUJMSUMiLiJTWVNURU1fU0VRVUVOQ0VfM0I2RDkxNUFfODJFQl80RDJBXzg1MjRfOUE3QzM5RjQyMUVFIiBTVEFSVCBXSVRIIDEgQkVMT05HU19UT19UQUJMRREEJSAhDUdDUkVBVEUgUFJJTUFSWSBLRVkgIlBVQkxJQyIuIlBSSU1BUllfS0VZXzYiIE9OICJQVUJMSUMiLiJDT01QQU5ZIigiSUQiKREEJiAlDXZBTFRFUiBUQUJMRSAiUFVCTElDIi4iQ09NUEFOWSIgQUREIENPTlNUUkFJTlQgIlBVQkxJQyIuIkNPTlNUUkFJTlRfNiIgUFJJTUFSWSBLRVkoIklEIikgSU5ERVggIlBVQkxJQyIuIlBSSU1BUllfS0VZXzYiEQQnICENT0NSRUFURSBVTklRVUUgSU5ERVggIlBVQkxJQyIuIkNPTlNUUkFJTlRfSU5ERVhfNiIgT04gIlBVQkxJQyIuIkNPTVBBTlkiKCJOQU1FIikRBCggJQ15QUxURVIgVEFCTEUgIlBVQkxJQyIuIkNPTVBBTlkiIEFERCBDT05TVFJBSU5UICJQVUJMSUMiLiJDT05TVFJBSU5UXzYzIiBVTklRVUUoIk5BTUUiKSBJTkRFWCAiUFVCTElDIi4iQ09OU1RSQUlOVF9JTkRFWF82IhEEKSAgDawCQ1JFQVRFIENBQ0hFRCBUQUJMRSAiUFVCTElDIi4iQ0FSIigKICAgICJJRCIgSU5UIERFRkFVTFQgTkVYVCBWQUxVRSBGT1IgIlBVQkxJQyIuIlNZU1RFTV9TRVFVRU5DRV85MTkwMEJGOF82QUQ3XzRERURfOUJBQl80MTQ5RUJGMzJDRkYiIE5PVCBOVUxMIE5VTExfVE9fREVGQVVMVCBTRVFVRU5DRSAiUFVCTElDIi4iU1lTVEVNX1NFUVVFTkNFXzkxOTAwQkY4XzZBRDdfNERFRF85QkFCXzQxNDlFQkYzMkNGRiIsCiAgICAiTkFNRSIgVkFSQ0hBUigyNTUpIE5PVCBOVUxMLAogICAgIkNPTVBBTllfSUQiIElOVCBOT1QgTlVMTAopEQQqICMNbUNSRUFURSBTRVFVRU5DRSAiUFVCTElDIi4iU1lTVEVNX1NFUVVFTkNFXzkxOTAwQkY4XzZBRDdfNERFRF85QkFCXzQxNDlFQkYzMkNGRiIgU1RBUlQgV0lUSCAxIEJFTE9OR1NfVE9fVEFCTEURBCsgIQ1DQ1JFQVRFIFBSSU1BUlkgS0VZICJQVUJMSUMiLiJQUklNQVJZX0tFWV8xIiBPTiAiUFVCTElDIi4iQ0FSIigiSUQiKREELCAlDXJBTFRFUiBUQUJMRSAiUFVCTElDIi4iQ0FSIiBBREQgQ09OU1RSQUlOVCAiUFVCTElDIi4iQ09OU1RSQUlOVF8xIiBQUklNQVJZIEtFWSgiSUQiKSBJTkRFWCAiUFVCTElDIi4iUFJJTUFSWV9LRVlfMSIRBC0gIQ1LQ1JFQVRFIFVOSVFVRSBJTkRFWCAiUFVCTElDIi4iQ09OU1RSQUlOVF9JTkRFWF8xIiBPTiAiUFVCTElDIi4iQ0FSIigiTkFNRSIpEQQuICUNdUFMVEVSIFRBQkxFICJQVUJMSUMiLiJDQVIiIEFERCBDT05TVFJBSU5UICJQVUJMSUMiLiJDT05TVFJBSU5UXzEwIiBVTklRVUUoIk5BTUUiKSBJTkRFWCAiUFVCTElDIi4iQ09OU1RSQUlOVF9JTkRFWF8xIhEELyAhDUxDUkVBVEUgSU5ERVggIlBVQkxJQyIuIkZLX0NPTVBBTllJRF9JTkRFWF8xIiBPTiAiUFVCTElDIi4iQ0FSIigiQ09NUEFOWV9JRCIpEQQEECAlDa0BQUxURVIgVEFCTEUgIlBVQkxJQyIuIkNBUiIgQUREIENPTlNUUkFJTlQgIlBVQkxJQyIuIkZLX0NPTVBBTllJRCIgRk9SRUlHTiBLRVkoIkNPTVBBTllfSUQiKSBJTkRFWCAiUFVCTElDIi4iRktfQ09NUEFOWUlEX0lOREVYXzEiIFJFRkVSRU5DRVMgIlBVQkxJQyIuIkNPTVBBTlkiKCJJRCIpIE5PQ0hFQ0sRBAQRICANqwJDUkVBVEUgQ0FDSEVEIFRBQkxFICJQVUJMSUMiLiJDVVNUT01FUiIoCiAgICAiSUQiIElOVCBERUZBVUxUIE5FWFQgVkFMVUUgRk9SICJQVUJMSUMiLiJTWVNURU1fU0VRVUVOQ0VfRjkzMEFGN0ZfOEZGRF80QzRFX0E5MzRfOEYzQzQ5RkYzMEEwIiBOT1QgTlVMTCBOVUxMX1RPX0RFRkFVTFQgU0VRVUVOQ0UgIlBVQkxJQyIuIlNZU1RFTV9TRVFVRU5DRV9GOTMwQUY3Rl84RkZEXzRDNEVfQTkzNF84RjNDNDlGRjMwQTAiLAogICAgIk5BTUUiIFZBUkNIQVIoMjU1KSBOT1QgTlVMTCwKICAgICJSRU5URURfQ0FSX0lEIiBJTlQKKREEBBIgIw1tQ1JFQVRFIFNFUVVFTkNFICJQVUJMSUMiLiJTWVNURU1fU0VRVUVOQ0VfRjkzMEFGN0ZfOEZGRF80QzRFX0E5MzRfOEYzQzQ5RkYzMEEwIiBTVEFSVCBXSVRIIDEgQkVMT05HU19UT19UQUJMRREEBBMgIQ1IQ1JFQVRFIFBSSU1BUlkgS0VZICJQVUJMSUMiLiJQUklNQVJZX0tFWV81IiBPTiAiUFVCTElDIi4iQ1VTVE9NRVIiKCJJRCIpEQQEFCAlDXdBTFRFUiBUQUJMRSAiUFVCTElDIi4iQ1VTVE9NRVIiIEFERCBDT05TVFJBSU5UICJQVUJMSUMiLiJDT05TVFJBSU5UXzUiIFBSSU1BUlkgS0VZKCJJRCIpIElOREVYICJQVUJMSUMiLiJQUklNQVJZX0tFWV81IhEEBBUgIQ1QQ1JFQVRFIFVOSVFVRSBJTkRFWCAiUFVCTElDIi4iQ09OU1RSQUlOVF9JTkRFWF81IiBPTiAiUFVCTElDIi4iQ1VTVE9NRVIiKCJOQU1FIikRBAQWICUNekFMVEVSIFRBQkxFICJQVUJMSUMiLiJDVVNUT01FUiIgQUREIENPTlNUUkFJTlQgIlBVQkxJQyIuIkNPTlNUUkFJTlRfNTIiIFVOSVFVRSgiTkFNRSIpIElOREVYICJQVUJMSUMiLiJDT05TVFJBSU5UX0lOREVYXzUiEQQEFyAhDVZDUkVBVEUgSU5ERVggIlBVQkxJQyIuIkZLX1JFTlRFRENBUklEX0lOREVYXzUiIE9OICJQVUJMSUMiLiJDVVNUT01FUiIoIlJFTlRFRF9DQVJfSUQiKREEBBggJQ21AUFMVEVSIFRBQkxFICJQVUJMSUMiLiJDVVNUT01FUiIgQUREIENPTlNUUkFJTlQgIlBVQkxJQyIuIkZLX1JFTlRFRENBUklEIiBGT1JFSUdOIEtFWSgiUkVOVEVEX0NBUl9JRCIpIElOREVYICJQVUJMSUMiLiJGS19SRU5URURDQVJJRF9JTkRFWF81IiBSRUZFUkVOQ0VTICJQVUJMSUMiLiJDQVIiKCJJRCIpIE5PQ0hFQ0sAAAMuDjUAHgAHY2h1bmsuMQVtYXAuMQVtYXAuMgVtYXAuMwVtYXAuNAVtYXAuNQVtYXAuNgVtYXAuNwVtYXAuOAVtYXAuOQVtYXAuYQVtYXAuYgVtYXAuYwVtYXAuZAVtYXAuZQ1uYW1lLmluZGV4LjEzDW5hbWUuaW5kZXguMTUNbmFtZS5pbmRleC4yMQ1uYW1lLmluZGV4LjIzDG5hbWUuaW5kZXguNwxuYW1lLmxvYkRhdGELbmFtZS5sb2JNYXALbmFtZS5sb2JSZWYVbmFtZS5vcGVuVHJhbnNhY3Rpb25zDG5hbWUudGFibGUuMA1uYW1lLnRhYmxlLjE3DG5hbWUudGFibGUuMwxuYW1lLnRhYmxlLjkObmFtZS51bmRvTG9nLjEGcm9vdC4zkQFjaHVuazoxLGJsb2NrOjIsbGVuOjEsbGl2ZU1heDowLGxpdmVQYWdlczowLG1hcDo2LG1heDoxMzAsbmV4dDozLHBhZ2VzOjIscm9vdDo0MDAwMDAzNjhjLHRpbWU6MWEsdW51c2VkOjM4LHVudXNlZEF0VmVyc2lvbjoxLHZlcnNpb246MSxwaW5Db3VudDowFW5hbWU6b3BlblRyYW5zYWN0aW9ucw5uYW1lOnVuZG9Mb2cuMQxuYW1lOnRhYmxlLjALbmFtZTpsb2JNYXALbmFtZTpsb2JSZWYMbmFtZTpsb2JEYXRhHG5hbWU6dGFibGUuMyxjcmVhdGVWZXJzaW9uOjEcbmFtZTppbmRleC43LGNyZWF0ZVZlcnNpb246MRxuYW1lOnRhYmxlLjksY3JlYXRlVmVyc2lvbjoxHW5hbWU6aW5kZXguMTMsY3JlYXRlVmVyc2lvbjoxHW5hbWU6aW5kZXguMTUsY3JlYXRlVmVyc2lvbjoxHW5hbWU6dGFibGUuMTcsY3JlYXRlVmVyc2lvbjoxHW5hbWU6aW5kZXguMjEsY3JlYXRlVmVyc2lvbjoxHW5hbWU6aW5kZXguMjMsY3JlYXRlVmVyc2lvbjoxAWEBYgFkAWUBOAE2ATQBNQExATMBYwE3ATkBMgo4MDAwMDAyZDVjh1bms6MixibG9jazozLHZlcnNpb246MixmbGV0Y2hlcjo5NWQwZDhmNiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIApjaHVuazozLGJsb2NrOjUsbGVuOjIsbWFwOjEwLG1heDoxNzQwLG5leHQ6NyxwYWdlczo3LHJvb3Q6YzAwMDAzODYxNix0aW1lOjE2Yyx2ZXJzaW9uOjMscGluQ291bnQ6MCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCgAADGQM0QMYADEyMzQ1NjcFCAUJBQoFCwUMBQ0FDgUPBRAFEQUSBRMFFAUVBRYFFwUYABEEISAmWFNFVCBDUkVBVEVfQlVJTEQgMjAwEQQiICINMkNSRUFURSBVU0VSIElGIE5PVCBFWElTVFMgIiIgU0FMVCAnJyBIQVNIICcnIEFETUlOEQQjICANkQJDUkVBVEUgQ0FDSEVEIFRBQkxFICJQVUJMSUMiLiJDT01QQU5ZIigKICAgICJJRCIgSU5UIERFRkFVTFQgTkVYVCBWQUxVRSBGT1IgIlBVQkxJQyIuIlNZU1RFTV9TRVFVRU5DRV8zQjZEOTE1QV84MkVCXzREMkFfODUyNF85QTdDMzlGNDIxRUUiIE5PVCBOVUxMIE5VTExfVE9fREVGQVVMVCBTRVFVRU5DRSAiUFVCTElDIi4iU1lTVEVNX1NFUVVFTkNFXzNCNkQ5MTVBXzgyRUJfNEQyQV84NTI0XzlBN0MzOUY0MjFFRSIsCiAgICAiTkFNRSIgVkFSQ0hBUigyNTUpIE5PVCBOVUxMCikRBCQgIw1tQ1JFQVRFIFNFUVVFTkNFICJQVUJMSUMiLiJTWVNURU1fU0VRVUVOQ0VfM0I2RDkxNUFfODJFQl80RDJBXzg1MjRfOUE3QzM5RjQyMUVFIiBTVEFSVCBXSVRIIDMgQkVMT05HU19UT19UQUJMRREEJSAhDUdDUkVBVEUgUFJJTUFSWSBLRVkgIlBVQkxJQyIuIlBSSU1BUllfS0VZXzYiIE9OICJQVUJMSUMiLiJDT01QQU5ZIigiSUQiKREEJiAlDXZBTFRFUiBUQUJMRSAiUFVCTElDIi4iQ09NUEFOWSIgQUREIENPTlNUUkFJTlQgIlBVQkxJQyIuIkNPTlNUUkFJTlRfNiIgUFJJTUFSWSBLRVkoIklEIikgSU5ERVggIlBVQkxJQyIuIlBSSU1BUllfS0VZXzYiEQQnICENT0NSRUFURSBVTklRVUUgSU5ERVggIlBVQkxJQyIuIkNPTlNUUkFJTlRfSU5ERVhfNiIgT04gIlBVQkxJQyIuIkNPTVBBTlkiKCJOQU1FIikRBCggJQ15QUxURVIgVEFCTEUgIlBVQkxJQyIuIkNPTVBBTlkiIEFERCBDT05TVFJBSU5UICJQVUJMSUMiLiJDT05TVFJBSU5UXzYzIiBVTklRVUUoIk5BTUUiKSBJTkRFWCAiUFVCTElDIi4iQ09OU1RSQUlOVF9JTkRFWF82IhEEKSAgDawCQ1JFQVRFIENBQ0hFRCBUQUJMRSAiUFVCTElDIi4iQ0FSIigKICAgICJJRCIgSU5UIERFRkFVTFQgTkVYVCBWQUxVRSBGT1IgIlBVQkxJQyIuIlNZU1RFTV9TRVFVRU5DRV85MTkwMEJGOF82QUQ3XzRERURfOUJBQl80MTQ5RUJGMzJDRkYiIE5PVCBOVUxMIE5VTExfVE9fREVGQVVMVCBTRVFVRU5DRSAiUFVCTElDIi4iU1lTVEVNX1NFUVVFTkNFXzkxOTAwQkY4XzZBRDdfNERFRF85QkFCXzQxNDlFQkYzMkNGRiIsCiAgICAiTkFNRSIgVkFSQ0hBUigyNTUpIE5PVCBOVUxMLAogICAgIkNPTVBBTllfSUQiIElOVCBOT1QgTlVMTAopEQQqICMNbUNSRUFURSBTRVFVRU5DRSAiUFVCTElDIi4iU1lTVEVNX1NFUVVFTkNFXzkxOTAwQkY4XzZBRDdfNERFRF85QkFCXzQxNDlFQkYzMkNGRiIgU1RBUlQgV0lUSCA0IEJFTE9OR1NfVE9fVEFCTEURBCsgIQ1DQ1JFQVRFIFBSSU1BUlkgS0VZICJQVUJMSUMiLiJQUklNQVJZX0tFWV8xIiBPTiAiUFVCTElDIi4iQ0FSIigiSUQiKREELCAlDXJBTFRFUiBUQUJMRSAiUFVCTElDIi4iQ0FSIiBBREQgQ09OU1RSQUlOVCAiUFVCTElDIi4iQ09OU1RSQUlOVF8xIiBQUklNQVJZIEtFWSgiSUQiKSBJTkRFWCAiUFVCTElDIi4iUFJJTUFSWV9LRVlfMSIRBC0gIQ1LQ1JFQVRFIFVOSVFVRSBJTkRFWCAiUFVCTElDIi4iQ09OU1RSQUlOVF9JTkRFWF8xIiBPTiAiUFVCTElDIi4iQ0FSIigiTkFNRSIpEQQuICUNdUFMVEVSIFRBQkxFICJQVUJMSUMiLiJDQVIiIEFERCBDT05TVFJBSU5UICJQVUJMSUMiLiJDT05TVFJBSU5UXzEwIiBVTklRVUUoIk5BTUUiKSBJTkRFWCAiUFVCTElDIi4iQ09OU1RSQUlOVF9JTkRFWF8xIhEELyAhDUxDUkVBVEUgSU5ERVggIlBVQkxJQyIuIkZLX0NPTVBBTllJRF9JTkRFWF8xIiBPTiAiUFVCTElDIi4iQ0FSIigiQ09NUEFOWV9JRCIpEQQEECAlDa0BQUxURVIgVEFCTEUgIlBVQkxJQyIuIkNBUiIgQUREIENPTlNUUkFJTlQgIlBVQkxJQyIuIkZLX0NPTVBBTllJRCIgRk9SRUlHTiBLRVkoIkNPTVBBTllfSUQiKSBJTkRFWCAiUFVCTElDIi4iRktfQ09NUEFOWUlEX0lOREVYXzEiIFJFRkVSRU5DRVMgIlBVQkxJQyIuIkNPTVBBTlkiKCJJRCIpIE5PQ0hFQ0sRBAQRICANqwJDUkVBVEUgQ0FDSEVEIFRBQkxFICJQVUJMSUMiLiJDVVNUT01FUiIoCiAgICAiSUQiIElOVCBERUZBVUxUIE5FWFQgVkFMVUUgRk9SICJQVUJMSUMiLiJTWVNURU1fU0VRVUVOQ0VfRjkzMEFGN0ZfOEZGRF80QzRFX0E5MzRfOEYzQzQ5RkYzMEEwIiBOT1QgTlVMTCBOVUxMX1RPX0RFRkFVTFQgU0VRVUVOQ0UgIlBVQkxJQyIuIlNZU1RFTV9TRVFVRU5DRV9GOTMwQUY3Rl84RkZEXzRDNEVfQTkzNF84RjNDNDlGRjMwQTAiLAogICAgIk5BTUUiIFZBUkNIQVIoMjU1KSBOT1QgTlVMTCwKICAgICJSRU5URURfQ0FSX0lEIiBJTlQKKREEBBIgIw1tQ1JFQVRFIFNFUVVFTkNFICJQVUJMSUMiLiJTWVNURU1fU0VRVUVOQ0VfRjkzMEFGN0ZfOEZGRF80QzRFX0E5MzRfOEYzQzQ5RkYzMEEwIiBTVEFSVCBXSVRIIDEgQkVMT05HU19UT19UQUJMRREEBBMgIQ1IQ1JFQVRFIFBSSU1BUlkgS0VZICJQVUJMSUMiLiJQUklNQVJZX0tFWV81IiBPTiAiUFVCTElDIi4iQ1VTVE9NRVIiKCJJRCIpEQQEFCAlDXdBTFRFUiBUQUJMRSAiUFVCTElDIi4iQ1VTVE9NRVIiIEFERCBDT05TVFJBSU5UICJQVUJMSUMiLiJDT05TVFJBSU5UXzUiIFBSSU1BUlkgS0VZKCJJRCIpIElOREVYICJQVUJMSUMiLiJQUklNQVJZX0tFWV81IhEEBBUgIQ1QQ1JFQVRFIFVOSVFVRSBJTkRFWCAiUFVCTElDIi4iQ09OU1RSQUlOVF9JTkRFWF81IiBPTiAiUFVCTElDIi4iQ1VTVE9NRVIiKCJOQU1FIikRBAQWICUNekFMVEVSIFRBQkxFICJQVUJMSUMiLiJDVVNUT01FUiIgQUREIENPTlNUUkFJTlQgIlBVQkxJQyIuIkNPTlNUUkFJTlRfNTIiIFVOSVFVRSgiTkFNRSIpIElOREVYICJQVUJMSUMiLiJDT05TVFJBSU5UX0lOREVYXzUiEQQEFyAhDVZDUkVBVEUgSU5ERVggIlBVQkxJQyIuIkZLX1JFTlRFRENBUklEX0lOREVYXzUiIE9OICJQVUJMSUMiLiJDVVNUT01FUiIoIlJFTlRFRF9DQVJfSUQiKREEBBggJQ21AUFMVEVSIFRBQkxFICJQVUJMSUMiLiJDVVNUT01FUiIgQUREIENPTlNUUkFJTlQgIlBVQkxJQyIuIkZLX1JFTlRFRENBUklEIiBGT1JFSUdOIEtFWSgiUkVOVEVEX0NBUl9JRCIpIElOREVYICJQVUJMSUMiLiJGS19SRU5URURDQVJJRF9JTkRFWF81IiBSRUZFUkVOQ0VTICJQVUJMSUMiLiJDQVIiKCJJRCIpIE5PQ0hFQ0sAAAAmDT8HAgAxMgARAiFNQ2FyIFRvIEdvEQIiTURyaXZlIE5vdwAAACYNZQgCABECTUNhciBUbyBHbzERAk1Ecml2ZSBOb3cyAAAAAAAATg0rCQMAMTIzABEDIVFIeXVuZGFpIFZlbnVlIREDIldNYXJ1dGkgU3V6dWtpIER6aXJlIREDI1ZMYW1ib3JnaGluaSBVcnJhY28iAAAASw38CgMAEQJRSHl1bmRhaSBWZW51ZTERAlZMYW1ib3JnaGluaSBVcnJhY28zEQJXTWFydXRpIFN1enVraSBEemlyZTIAAAAAAAAAGQ3lCwMAEQIhMRECITIRAiIzAAAAAAAABG0KdgAmAAdjaHVuay4xB2NodW5rLjIFbWFwLjEGbWFwLjEwBW1hcC4zBW1hcC40BW1hcC41BW1hcC42BW1hcC43BW1hcC44BW1hcC45BW1hcC5hBW1hcC5iBW1hcC5jBW1hcC5kBW1hcC5lBW1hcC5mDW5hbWUuaW5kZXguMTMNbmFtZS5pbmRleC4xNQ1uYW1lLmluZGV4LjIxDW5hbWUuaW5kZXguMjMMbmFtZS5pbmRleC43DG5hbWUubG9iRGF0YQtuYW1lLmxvYk1hcAtuYW1lLmxvYlJlZhVuYW1lLm9wZW5UcmFuc2FjdGlvbnMMbmFtZS50YWJsZS4wDW5hbWUudGFibGUuMTcMbmFtZS50YWJsZS4zDG5hbWUudGFibGUuOQ5uYW1lLnVuZG9Mb2cuMQ5uYW1lLnVuZG9Mb2cuMgZyb290LjMGcm9vdC43BnJvb3QuOAZyb290LjkGcm9vdC5hBnJvb3QuYpEBY2h1bms6MSxibG9jazoyLGxlbjoxLGxpdmVNYXg6MCxsaXZlUGFnZXM6MCxtYXA6NixtYXg6MTMwLG5leHQ6MyxwYWdlczoyLHJvb3Q6NDAwMDAwMzY4Yyx0aW1lOjFhLHVudXNlZDozOCx1bnVzZWRBdFZlcnNpb246MSx2ZXJzaW9uOjEscGluQ291bnQ6MJMBY2h1bms6MixibG9jazozLGxlbjoyLGxpdmVNYXg6MCxsaXZlUGFnZXM6MCxtYXA6ZSxtYXg6MTQwMCxuZXh0OjUscGFnZXM6Mixyb290OjgwMDAwMzQ2NTQsdGltZTozOCx1bnVzZWQ6MTZjLHVudXNlZEF0VmVyc2lvbjoyLHZlcnNpb246MixwaW5Db3VudDowFW5hbWU6b3BlblRyYW5zYWN0aW9ucx5uYW1lOnVuZG9Mb2cuMixjcmVhdGVWZXJzaW9uOjIMbmFtZTp0YWJsZS4wC25hbWU6bG9iTWFwC25hbWU6bG9iUmVmDG5hbWU6bG9iRGF0YRxuYW1lOnRhYmxlLjMsY3JlYXRlVmVyc2lvbjoxHG5hbWU6aW5kZXguNyxjcmVhdGVWZXJzaW9uOjEcbmFtZTp0YWJsZS45LGNyZWF0ZVZlcnNpb246MR1uYW1lOmluZGV4LjEzLGNyZWF0ZVZlcnNpb246MR1uYW1lOmluZGV4LjE1LGNyZWF0ZVZlcnNpb246MR1uYW1lOnRhYmxlLjE3LGNyZWF0ZVZlcnNpb246MR1uYW1lOmluZGV4LjIxLGNyZWF0ZVZlcnNpb246MR1uYW1lOmluZGV4LjIzLGNyZWF0ZVZlcnNpb246MR5uYW1lOnVuZG9Mb2cuMSxjcmVhdGVWZXJzaW9uOjIBYQFiAWQBZQE4ATYBNAE1ATEBMwFjATcBOQFmAjEwCmMwMDAwMDJkOWMKYzAwMDAzNDY4MgpjMDAwMDM1MDAyCmMwMDAwMzU5ODYKYzAwMDAzNmQwNgpjMDAwMDM3ZmMwjaHVuazozLGJsb2NrOjUsdmVyc2lvbjozLGZsZXRjaGVyOmFjZDBkY2Y2ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCg==
  learner_created: true
- name: src/carsharing/Entities/Company.java
  visible: true
  text: |-
    package carsharing.Entities;

    public class Company {
        private final int ID;
        private String name;

        public Company (String name) {
            this(0, name);
        }

        public Company(int ID, String name) {
            this.ID = ID;
            this.name = name;
        }

        public int getID() {
            return ID;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        @Override
        public String toString() {
            return ID + ". " + name;
        }
    }
  learner_created: true
- name: src/carsharing/Menu.java
  visible: true
  text: |
    package carsharing;

    import carsharing.DAO.CarImpl;
    import carsharing.DAO.CompanyImpl;
    import carsharing.DAO.CustomerImpl;
    import carsharing.Entities.Car;
    import carsharing.Entities.Company;
    import carsharing.Entities.Customer;

    import java.sql.SQLException;
    import java.util.List;
    import java.util.Scanner;

    public class Menu {
        private static final Scanner in = new Scanner(System.in);
        private static final CompanyImpl companies = new CompanyImpl();
        private static final CarImpl cars = new CarImpl();
        private static final CustomerImpl customers = new CustomerImpl();

        public static void mainMenu() {
            System.out.println("""
                             1. Log in as a manager
                             2. Log in as a customer
                             3. Create a customer
                             0. Exit
                             """);
            int userChoice = Integer.parseInt(in.next());

            switch (userChoice) {
                case 0 -> exitProgram();
                case 1 -> displayManagerMenu();
                case 2 -> logInAsCustomer();
                case 3 -> createCustomer();
            }
            mainMenu();
        }
        private static void exitProgram() {
            try {
                Database.closeConnection();
            } catch (SQLException e) {
                throw new RuntimeException(e);
            }
            System.exit(0);
        }
        private static void displayManagerMenu() {
            System.out.println("""
                    1. Company list
                    2. Create a company
                    0. Back
                    """);
            int userChoice = Integer.parseInt(in.next());

            switch (userChoice) {
                case 0 -> mainMenu();
                case 1 -> companiesMenu();
                case 2 -> createCompany();
            }
            displayManagerMenu();
        }

        private static void companiesMenu() {
            if (companies.count() > 0) {
                System.out.println("Choose the company: ");
                companies.printCompanies();
                System.out.println("0. Back");
                int companyID = Integer.parseInt(in.next());
                if (companyID > 0) {
                    System.out.println("'" + companies.getCompanyName(companyID) + "' company");
                    displayCompanyMenu(companyID);
                }
                else {
                    displayManagerMenu();
                }
            }
            else
                System.out.println("The company list is empty!");
        }

        private static void logInAsCustomer() {
            if (customers.count() == 0) {
                System.out.println("The customer list is empty!");
                return;
            }
            System.out.println("Choose a customer: ");
            customers.printCustomers();
            System.out.println("0. Back");
            int custID = Integer.parseInt(in.next());
            if (custID > 0)
                displayCustomerMenu(custID);
            else
                mainMenu();
        }
        private static void createCustomer() {
            System.out.println("Enter the customer name: ");
            in.nextLine();
            String customerName = in.nextLine();
            customers.create(new Customer(customerName)); // IMPLEMENT CREATE
            System.out.println("The customer was added!");
        }


        private static void createCompany() {
            System.out.println("Enter the company name:");
            in.nextLine();
            String companyName = in.nextLine();
            companies.create(new Company(companyName));
            System.out.println("The company was created!");
        }

        private static void displayCompanyMenu(int companyID) {
            System.out.println("""
                    1. Car list
                    2. Create a car
                    0. Back
                    """);
            int userChoice = Integer.parseInt(in.next());
            switch (userChoice) {
                case 0 -> displayManagerMenu();
                case 1 -> cars.printCars(companyID);
                case 2 -> createCar(companyID);
            }
            displayCompanyMenu(companyID);
        }

        private static void createCar(int companyID) {
            System.out.println("Enter the car name:");
            in.nextLine();
            String carName = in.nextLine();
            cars.create(new Car(0, carName, companyID));
            System.out.println("The car was added!");
        }


        private static void displayCustomerMenu(int customerID) {
            System.out.println("""
                    1. Rent a car
                    2. Return a rented car
                    3. My rented car
                    0. Back
                    """);
            int userChoice = Integer.parseInt(in.next());
            switch (userChoice) {
                case 0 -> mainMenu();
                case 1 -> rentCar(customerID);
                case 2 -> returnRentedCar(customerID);
                case 3 -> printRentedCarDetail(customerID);
            }
            displayCustomerMenu(customerID);
        }

        private static void rentCar(int customerID) {
            if (companies.count() == 0) {
                System.out.println("The company list is empty!");
                displayCustomerMenu(customerID);
            }
            if (customers.getCarID(customerID) != 0) {
                System.out.println("You've already rented a car!");
                displayCustomerMenu(customerID);
            }
            System.out.println("Choose a company: ");
            companies.printCompanies();
            System.out.println("0. Back");
            int companyID = Integer.parseInt(in.next());
            if (companyID == 0)
                mainMenu();
            List<Car> availableCars = cars.getAvailableCars(companyID);
            if (availableCars.size() == 0) {
                System.out.println("No available cars in the " + companies.getCompanyName(companyID) + " company");
                rentCar(customerID);
            }
            System.out.println("Choose a car: ");
            for (int i = 1; i <= availableCars.size(); i++) {
                System.out.println(i+ ". " + availableCars.get(i-1).getName());
            }
            System.out.println("Back");
            int userChoice = Integer.parseInt(in.next());
            if (userChoice == 0)
                displayCustomerMenu(customerID);
            customers.rentCar(customerID, availableCars.get(userChoice-1).getID());
            System.out.println("You rented " + "'" + availableCars.get(userChoice-1).getName() + "'");
            displayCustomerMenu(customerID);
        }

        private static void returnRentedCar(int customerID) {
            customers.returnCar(customerID);
        }

        private static void printRentedCarDetail(int customerID) {
            int carID = customers.getCarID(customerID);
            if (carID == 0)
                System.out.println("You didn't rent a car!");
            else {
                Car rentedCar = cars.getCar(carID);
                System.out.println("Your rented car:");
                System.out.println(rentedCar.getName());
                System.out.println("Company:");
                System.out.println(companies.getCompanyName(rentedCar.getCompanyID()));
            }
        }

    }
  learner_created: true
- name: src/carsharing/DAO/CarImpl.java
  visible: true
  text: |-
    package carsharing.DAO;

    import carsharing.Database;
    import carsharing.Entities.Car;

    import java.sql.PreparedStatement;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.util.ArrayList;
    import java.util.List;

    public class CarImpl implements AbstractDao<Car> {

        private List<Car> cars;

        public CarImpl() {
            this.cars = new ArrayList<>();
        }


        public List<Car> getAllByCompanyID(int companyID) {
            try {
                String printCarsQuery = """
                                             SELECT *
                                             FROM CAR
                                             WHERE COMPANY_ID = (?)
                                             """;
                PreparedStatement prepdStmt = Database.connection.prepareStatement(printCarsQuery);
                prepdStmt.setInt(1, companyID);
                ResultSet rs = prepdStmt.executeQuery();
                cars.clear();
                while (rs.next())
                    cars.add(new Car(rs.getInt("ID"), rs.getString("NAME"), rs.getInt("COMPANY_ID")));
            }
            catch (SQLException e) {
                e.printStackTrace();
            }
            return cars;
        }

        @Override
        public List<Car> getAll() {
            return null;
        }

        @Override
        public void create(Car car) {
            try {
                String query = """
                               INSERT INTO CAR (NAME, COMPANY_ID)
                               VALUES (?, ?);
                               """;
                PreparedStatement prepdStmt = Database.connection.prepareStatement(query);
                prepdStmt.setString(1, car.getName());
                prepdStmt.setInt(2, car.getCompanyID());
                prepdStmt.executeUpdate();
                prepdStmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        @Override
        public void update(Car car) {

        }

        @Override
        public void delete(int ID) {

        }

        public void printCars(int companyID) {
            cars = getAllByCompanyID(companyID);
            if (cars.size()==0) {
                System.out.println("The car list is empty!");
                return;
            }
            for (int i=1; i<=cars.size(); i++)
                System.out.println(i+". " + cars.get(i-1).getName());
            System.out.println();
        }

        public List<Car> getAvailableCars(int companyID) {
            List<Car> availableCars = new ArrayList<>();
            try {
                String query = """
                               SELECT CAR.ID, CAR.NAME, CAR.COMPANY_ID
                               FROM CAR LEFT JOIN CUSTOMER ON CAR.ID = CUSTOMER.RENTED_CAR_ID
                               WHERE COMPANY_ID = (?) AND CUSTOMER.ID IS NULL
                               """;
                PreparedStatement prepdStmt = Database.connection.prepareStatement(query);
                prepdStmt.setInt(1, companyID);
                ResultSet rs = prepdStmt.executeQuery();
                while (rs.next()) {
                    int id = rs.getInt("ID");
                    String name = rs.getString("NAME");
                    availableCars.add(new Car(id, name, companyID));
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            return availableCars;
        }

        public Car getCar(int carID) {
            Car car = null;
            try {
                String query = """
                               SELECT *
                               FROM CAR
                               WHERE ID = (?)
                               """;
                PreparedStatement prepdStmt = Database.connection.prepareStatement(query);
                prepdStmt.setInt(1, carID);
                ResultSet rs = prepdStmt.executeQuery();
                rs.next();
                int ID = rs.getInt("ID");
                String name = rs.getString("NAME");
                int companyID = rs.getInt("COMPANY_ID");
                car = new Car(ID, name, companyID);

            } catch (SQLException e) {
                e.printStackTrace();
            }
            return car;
        }
    }
  learner_created: true
- name: src/carsharing/DAO/AbstractDao.java
  visible: true
  text: |-
    package carsharing.DAO;

    import java.util.List;

    public interface AbstractDao<T> {

        public List<T> getAll();

        public void create(T t);

        public void update(T t);

        public void delete(int ID);
    }
  learner_created: true
- name: src/carsharing/DAO/CustomerImpl.java
  visible: true
  text: |
    package carsharing.DAO;

    import carsharing.Database;
    import carsharing.Entities.Customer;

    import java.sql.PreparedStatement;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.util.ArrayList;
    import java.util.List;


    public class CustomerImpl implements AbstractDao<Customer> {

        private List<Customer> customers;

        public CustomerImpl() {
            this.customers = new ArrayList<>();
        }

        @Override
        public List<Customer> getAll() {
            try {
                String printCompaniesQuery = """
                                             SELECT *
                                             FROM CUSTOMER
                                             ORDER BY ID;
                                             """;
                ResultSet rs = Database.stmt.executeQuery(printCompaniesQuery);
                customers.clear();
                while (rs.next())
                    customers.add(new Customer(
                            rs.getInt("ID"),
                            rs.getString("NAME"),
                            rs.getInt("RENTED_CAR_ID")));
            }
            catch (SQLException e) {
                e.printStackTrace();
            }
            return customers;
        }

        @Override
        public void create(Customer customer) {
            try {
                String query = """
                               INSERT INTO CUSTOMER (NAME, RENTED_CAR_ID)
                               VALUES (?, NULL);
                               """;
                PreparedStatement prepdStmt = Database.connection.prepareStatement(query);
                prepdStmt.setString(1, customer.getName());
                prepdStmt.executeUpdate();
                prepdStmt.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        @Override
        public void update(Customer customer) {

        }

        @Override
        public void delete(int ID) {

        }

        public int count() {
            customers = getAll();
            return customers.size();
        }

        public void printCustomers() {
            for (Customer customer : customers)
                System.out.println(customer.toString());
        }
        public int getCarID(int customerID) {
            int carID = 0;
            try {
                String query = """
                               SELECT *
                               FROM CUSTOMER
                               WHERE ID = (?)
                               """;
                PreparedStatement prepdStmt = Database.connection.prepareStatement(query);
                prepdStmt.setInt(1, customerID);
                ResultSet rs = prepdStmt.executeQuery();
                rs.next();
                carID = rs.getInt("RENTED_CAR_ID");
                prepdStmt.close();
            }
            catch (SQLException e) {
                e.printStackTrace();
            }
            return carID;
        }


        public void returnCar(int customerID) {
            if (getCarID(customerID)==0) {
                System.out.println("You didn't rent a car!");
                return;
            }
            try {
                String returnCar = """
                                   UPDATE CUSTOMER
                                   SET RENTED_CAR_ID = NULL
                                   WHERE ID = (?)
                                   """;
                PreparedStatement prepdStmt = Database.connection.prepareStatement(returnCar);
                prepdStmt.setInt(1, customerID);
                prepdStmt.executeUpdate();
                prepdStmt.close();
            }
            catch (SQLException e) {
                e.printStackTrace();
            }
            System.out.println("You've returned a rented car!");
        }

        public void rentCar(int customerID, int car_id) {
            try {
                String returnCar = """
                                   UPDATE CUSTOMER
                                   SET RENTED_CAR_ID = (?)
                                   WHERE ID = (?)
                                   """;
                PreparedStatement prepdStmt = Database.connection.prepareStatement(returnCar);
                prepdStmt.setInt(1, car_id);
                prepdStmt.setInt(2, customerID);
                prepdStmt.executeUpdate();
                prepdStmt.close();
            }
            catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/carsharing/Entities/Car.java
  visible: true
  text: |
    package carsharing.Entities;


    public class Car {
        private final int ID;
        private String name;
        private final int companyID;

        public Car(int ID, String name, int companyID) {
            this.ID = ID;
            this.name = name;
            this.companyID = companyID;
        }

        public int getID() {
            return ID;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getCompanyID() {
            return companyID;
        }

    }
  learner_created: true
- name: src/carsharing/Entities/Customer.java
  visible: true
  text: |-
    package carsharing.Entities;


    public class Customer {
        private final int ID;
        private final String name;
        private final int rentedCarID;


        public Customer (String name) {
            this(0, name,0);
        }
        public Customer(int ID, String name, int rentedCarID) {
            this.ID = ID;
            this.name = name;
            this.rentedCarID = rentedCarID;
        }

        public int getID() {
            return ID;
        }
        public String getName() {
            return name;
        }
        public int getRentedCarID() {
            return rentedCarID;
        }

        @Override
        public String toString() {
            return ID + ". " + name;
        }

    }
  learner_created: true
- name: src/carsharing/Database.java
  visible: true
  text: |
    package carsharing;

    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.sql.Statement;

    public class Database {
        public static String dbName="carsharing";
        static final String JDBC_DRIVER = "org.h2.Driver";
        static final String DB_URL = "jdbc:h2:./src/carsharing/db/" + dbName;
        public static Statement stmt;
        public static Connection connection;
        public static void createConnection() {
            try {
                Class.forName(JDBC_DRIVER);
                connection = DriverManager.getConnection(DB_URL);
                stmt = connection.createStatement();
                connection.setAutoCommit(true);
    //            resetDatabase();
                createDatabase();

            }
            catch (Exception e) {
                System.out.println(e.getMessage());
            }
        }


        public static void closeConnection() throws SQLException {
            stmt.close();
            connection.close();
        }

        private static void createDatabase() {
            createCompanyTable();
            createCarTable();
            createCustomerTable();
        }

        private static void createCompanyTable() {
            try {
                String createCompanyTable = """
                                          CREATE TABLE IF NOT EXISTS COMPANY (
                                          ID INT AUTO_INCREMENT PRIMARY KEY,
                                          NAME VARCHAR(255) NOT NULL UNIQUE
                                          );
                                          """;
                Database.stmt.execute(createCompanyTable);
            }
            catch (SQLException e) {
                e.printStackTrace();
            }
        }

        private static void createCarTable() {
            try {
                String createCarTable = """
                                          CREATE TABLE IF NOT EXISTS CAR (
                                          ID INT AUTO_INCREMENT PRIMARY KEY,
                                          NAME VARCHAR(255) NOT NULL UNIQUE,
                                          COMPANY_ID INT NOT NULL,
                                          CONSTRAINT fk_companyID FOREIGN KEY (COMPANY_ID) REFERENCES COMPANY(ID)
                                          );
                                          """;

                Database.stmt.execute(createCarTable);
            }
            catch (SQLException e) {
                e.printStackTrace();
            }
        }

        private static void createCustomerTable() {
            try {
                String createCustomerTable = """
                                             CREATE TABLE IF NOT EXISTS CUSTOMER (
                                             ID INT AUTO_INCREMENT PRIMARY KEY,
                                             NAME VARCHAR(255) NOT NULL UNIQUE,
                                             RENTED_CAR_ID INT,
                                             CONSTRAINT fk_rentedCarID FOREIGN KEY (RENTED_CAR_ID) REFERENCES CAR(ID)
                                             );
                                             """;
                Database.stmt.execute(createCustomerTable);
            }
            catch (SQLException e) {
                e.printStackTrace();
            }
        }

        private static void resetDatabase() {
            String drop = "DROP TABLE IF EXISTS COMPANY";
            String drop2 = "DROP TABLE IF EXISTS CAR";
            String drop3 = "DROP TABLE IF EXISTS CUSTOMER";
            try {
                stmt.executeUpdate(drop3);
                stmt.executeUpdate(drop2);
                stmt.executeUpdate(drop);
            }
            catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11504#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Thu, 30 Mar 2023 12:39:32 UTC"
record: -1
